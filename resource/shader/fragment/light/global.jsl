#include frag.jsl
#include deferred.jsl
#include lighting.jsl
#include texturing.jsl

uniform sampler2D normalBuffer;

void main() {
  float depth = GetDepthNormalized();
  vec3 color = toLinear(starColor);
  vec3 light = vec3(0.0);

  vec4 normalmat = texture2D(normalBuffer, uv);
  vec3 N = decodeNormal(normalmat.xy);
  float roughness = normalmat.z;
  int material = int(kMaterialCount * normalmat.w);

  vec3 p = worldRayO + depth * worldRayD;
  float fog = getFoginess(length(p));

  /* Lambertian. */
  if (material == MATERIAL_PHONG) {
    vec3 V = normalize(p - eye);
    vec3 R = normalize(reflect(V, N));
    vec3 L = normalize(starPos);
    float NL = dot(N, L);
    float l = exp(-pow(1.0 - NL, 12.0));
    vec3 env = toLinear(textureCube(envMapLF, N).xyz);

#if 0
    light += 96.0 * (1.0 - fog) * l * color;
    light += 4.0 * env;
#else
    light += 8.0 * l;
    light += 8.0 * env;
#endif
    light += 0.1;
  }

  /* Ice. */
  else if (material == MATERIAL_ICE) {
    const vec3 specColor = vec3(1.5, 1.8, 2.0);
    const vec3 transColor = vec3(0.5, 1.0, 1.5);

    vec3 V = normalize(p - eye);
    vec3 L = normalize(starPos - p);
    vec3 refl = normalize(reflect(V, N));
    vec3 refr = normalize(refract(V, N, 1.0 / 1.15));
    float fresnel = pow2(1.0 - saturate(dot(N, refl)));

    light +=
      0.3 * toLinear(textureCube(envMap, refr).xyz) +
      4.0 * fresnel * specColor * toLinear(textureCube(envMap, refl).xyz);

    float specular = 16.0 * exp(-sqrt(256.0 * (1.0 - dot(L, refl))));
    float transmission = 
      0.1 * exp(-32.0 * (1.0 - dot(L, refr))) + 
      4.0 * exp(-512.0 * (1.0 - dot(L, refr)));

    light += (color / length(L)) * mix(
      transmission * transColor,
      specular * specColor,
      fresnel);
  }
  
  /* Metal. */
  else if (material == MATERIAL_COOKT) {
    vec3 V = normalize(p - eye);
    vec3 R = normalize(reflect(V, N));
    vec3 L = normalize(starPos);
    // light += color * cookTorrance(L, p, N, pow2(roughness), 1.0);
#if 0
    light += 8.0 * toLinear(texLod(envMap, R, mix(0.0, 8.0, roughness)).xyz);
#else
#ifdef HIGHQ
#if 1
    vec3 bg = toLinear(texLod(irMap, R, mix(0.0, 9.0, sqrt(roughness))).xyz);
#else
    vec3 bg = getMetalPBR(p, N, roughness);
#endif
    light += bg;
#else
    vec3 bg = toLinear(textureCube(envMapLF, R).xyz);
    light += bg;
#endif
#endif
  }

  else if (material == MATERIAL_NOSHADE) {
    light = vec3(1.0);
  }

  RETURN(vec4(light, 1.0));
}
